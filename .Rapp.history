projDir
colnames(sumDat) <- gsub("_n.*","",colnames(sumDat)
t(sumDat)
is(sumDat)
sumDat <- t(sumDat)
rownames(sumDat)
paste0(colnames(sumDat),seq(1:24))
paste0(colnames(sumDat),"_",seq(1:24))
datDir <- paste0(projDir,"web/data/NOBACK/gsu/hg19/")
sumDat <- read.delim(paste0(datDir,"genes.txt.summary"), sep="\t",h=T)
rownames(sumDat) <- sumDat$Status
sumDat <- sumDat[,-1]
sumDat <- sumDat[rowSums(sumDat)>0,]
colnames(sumDat) <- gsub("_n.*","",colnames(sumDat))
grepl("H$",colnames(sumDat))
which(!grepl("H$",colnames(sumDat)))
colnames(sumDat)[which(!grepl("H$",colnames(sumDat)))] <-
paste0(colnames(sumDat)[which(!grepl("H$",colnames(sumDat)))],"_N")
colnames(sumDat)
colnames(sumDat) <- paste0(colnames(sumDat),"_",seq(1,24))
sumDat <- as.data.frame(t(sumDat))
sumDat$pAligned <- sumDat$Assigned*100/rowSums(sumDat)
sumDat$chip <- sapply(rownames(sumDat),function(s) head(strsplit(s,"_")[[1]],1))
regexpr("\[([^]]+)\]",rownames(sumDat))
regexpr("_([^]]+)_",rownames(sumDat))
sapply(regexpr("_([^]]+)_",rownames(sumDat)),function(x) substr(rownames(sumDat,x+1,1))
)
sapply(regexpr("_([^]]+)_",rownames(sumDat)),function(x) substr(rownames(sumDat),x+1,1))
sumDat$treat <- ifelse(grepl("_H_",rownames(sumDat)),"H","N")
sumDat
require(ggplot2)
ggplot(sumDat) + geom_boxplot(aes(x=treat,y=pAligned))
ggplot(sumDat) + geom_boxplot(aes(x=chip,y=pAligned))
ggplot(sumDat) + geom_boxplot(aes(x=chip,y=pAligned,colour=chip))
ggplot(sumDat) + geom_boxplot(aes(x=chip,y=pAligned,fill=chip))
lm(pAligned~chip*treat,sumDat)
summary(lm(pAligned~chip*treat,sumDat))
summary(lm(pAligned~0+(chip*treat),sumDat))
TukeyHSD(lm(pAligned~0+(chip*treat),sumDat))
help(TukeyHSD)
TukeyHSD(summary(aov(pAligned~0+(chip*treat),sumDat)))
TukeyHSD(aov(pAligned~0+(chip*treat),sumDat))
TukeyHSD(aov(pAligned~(chip*treat),sumDat))
tHSD <- TukeyHSD(aov(pAligned~(chip*treat),sumDat))
tHSD <- TukeyHSD(aov(pAligned~chip,sumDat))
tHSD$chip
fcDat <- read.delim(paste0(datDir,"genes.txt"), sep="\t",h=T,skip=1)
fcDat
fcDat <- pietalib::readFCpaste0(datDir,"genes.txt"))
fcDat <- pietalib::readFCpaste0(datDir,"genes.txt")
fcDat <- pietalib::readFC(paste0(datDir,"genes.txt")
head(fcDat)
setwd("git_hub/pietalib/")
summary(fcDat)
lapply(fcDat,head)
chip=sapply(colnames(fcDat$counts)
cbind(lib=sapply(colnames(fcDat$counts)
strsplit(x,"_")[[1]][2]
toUpper(gsub("[.].*","",strsplit(x,"_")[[1]][2]))
cbind(lib=sapply(colnames(fcDat$counts),
toupper(gsub("[.].*","",strsplit(x,"_")[[1]][2]))
cbind(chip=sapply(colnames(fcDat$counts),
libs=sapply(colnames(fcDat$counts),
chip=sapply(colnames(fcDat$counts),
}),
treat=sapply(colnames(fcDat$counts),
sapples
samples
colnames(fcDat$counts)
input <- fcDat$counts[,which(grepl("^I",colnames(fcDat$Counts))]
input <- fcDat$counts[,which(grepl("^I",colnames(fcDat$Counts)))]
head(fcDat$counts)
devtools::document()
devtools::load_all()
devtools::install(reload=T)
fcDat <- pietalib::readFC(paste0(datDir,"genes.txt"))
libs=unname(sapply(colnames(fcDat$counts),
tail(strsplit(x,"_")[[1]],1)
colnames(fcDat$counts) <- gsub("[.].*","",colnames(fcDat$counts))
colnames(fcDat$counts) <- gsub("_H.*","_H",colnames(fcDat$counts))
samples <- as.data.frame(
cbind(lib=libs,
chip=unname(sapply(colnames(fcDat$counts),
head(strsplit(x,"_")[[1]],1)
})),
treat=unname(sapply(colnames(fcDat$counts),
toupper(tail(strsplit(x,"_")[[1]],1))
}))
))
input <- fcDat$counts[,which(grepl("^I",colnames(fcDat$counts)))]
rownames(input) <- rownames(fcDat$counts)
head(input)
groups <- ifelse(grepl("_H",colnames(input)),"H","N")
groups
require(edgeR)
dge <- calcNormFactors(dge,method="upperquantile")
help(calcNormFactors)
dge <- DGEList(input,groups)
groups <- as.factor(ifelse(grepl("_H",colnames(input)),"H","N"))
input <- input[rowSums(input)>0,]
dge <- DGEList(input,group=groups)
dge <- calcNormFactors(dge,method="upperquartile")
dge
help(edgeR)
des <- model.matrix(~group)
des <- model.matrix(~groups)
dge <- estimateGLMCommonDisp(dge,des)
dge <- estimateGLMTrendedDisp(dge,des)
dge <- estimateGLMTagwiseDisp(dge,des)
fit <- glmFit(dge,des)
lrt <- glmLRT(fit,coef=2)
res <- topTags(lrt,n=100000)
head(res)
length(which(res$FDR<0.05))
res
plotMDS(dge)
100*length(x$FDR<0.05)/length(x$FDR)
100*length(df$FDR<0.05)/length(df$FDR)
ls()
length(which(as.data.frame(res)$FDR<0.05))
base::source("/var/folders/w2/j88z6b513vl7vf5cd6727t8w0000gn/T/r-plugin-pschofield/Rsource-1201")
resAll <- lapply(c("^I","K4","K9","K36"),doEdgeR)
head(resAll[[1]])
head(resAll[[2]])
head(resAll[[3]])
head(resAll[[4]])
lapply(resAll,
function(x){
df <- as.data.frame(x)
quartz()
plot(df$logCPM,df$logFC,pch=".",col=ifelse(df$PValue<0.05,2,1))
abline(0,0,col=2)
100*length(which(df$FDR<0.05))/length(df$FDR)
})
q()
